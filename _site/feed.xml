<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Todd</title>
		<description>Welcome to My blog！</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Change python version</title>
				<description>&lt;h1 id=&quot;methods&quot;&gt;methods&lt;/h1&gt;

&lt;h2 id=&quot;update-alternate&quot;&gt;update-alternate&lt;/h2&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;update-alternatives &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; /usr/bin/python python /usr/bin/python3.4 priority_number
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;查看已有的 python alternatives&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;update-alternatives &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;
更新python的版本之后，会导致奇怪的问题&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;st@st-MS-7918:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;add-apt-repository &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;
Traceback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;most recent call last&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
  File &lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin/add-apt-repository&quot;&lt;/span&gt;, line 11, &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    from softwareproperties.SoftwareProperties import SoftwareProperties, shortcut_handler
  File &lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/python3/dist-packages/softwareproperties/SoftwareProperties.py&quot;&lt;/span&gt;, line 28, &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &amp;lt;module&amp;gt;
    import apt_pkg
ModuleNotFoundError: No module named &lt;span class=&quot;s1&quot;&gt;'apt_pkg'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;软链接&quot;&gt;软链接&lt;/h2&gt;
&lt;p&gt;在搜索路径下，将python链接到目标python版本下的可执行文件&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sfn&lt;/span&gt; path_to_tar_python/bin/python3.6 /usr/bin/python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ln&lt;/code&gt;的基本用法&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options] TARGET LINK_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Options&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;s: symbolic, make symbolic links instead of hard links&lt;/li&gt;
  &lt;li&gt;f: force&lt;/li&gt;
  &lt;li&gt;n: no-dereference, treat LINK_NAME as a normal file if it is a symbolic link to a directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;同样存在上述问题&lt;/strong&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 13 Sep 2019 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/work/2019/09/13/change-python-version.html</link>
				<guid isPermaLink="true">http://localhost:4000/work/2019/09/13/change-python-version.html</guid>
			</item>
		
			<item>
				<title>Gammatone-filter</title>
				<description>&lt;h1 id=&quot;gammatone-filters&quot;&gt;Gammatone-filters&lt;/h1&gt;
&lt;p&gt;Python implementation of Gammatone filter.&lt;/p&gt;

&lt;p&gt;The filtering part of code is written in C.&lt;/p&gt;

&lt;h2 id=&quot;basic-ideas-&quot;&gt;Basic ideas &lt;sup id=&quot;fnref:Holdsworth1988&quot;&gt;&lt;a href=&quot;#fn:Holdsworth1988&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;p&gt;The impulse response of Gammatone filter is defined as follow&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g(t) = \frac{at^{n-1}\cos(2\pi f_ct+\phi)}{e^{2\pi b t}}&lt;/script&gt;

&lt;p&gt;in which&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;f_c&lt;/script&gt;: center frequency&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; : bandwidth,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;g(t)&lt;/script&gt; can be regarded as the mutliplication result of two parts,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
\begin{aligned}
g(t)&amp;=a \times \underbrace{t^{n-1}e^{-2\pi bt}}_\text{r(t)} \times \underbrace{cos(2\pi f_c t+\phi)}_{s(t)}\\
\end{aligned}
\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;Multiplication in time domain = convolution in frequency domain, so&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
\begin{aligned}
R(f)=FT(t^{n-1}e^{-2\pi b t})
&amp;=\frac{1}{(j2\pi)^{n-1}}\frac{\partial^{n-1} FT(e^{-2\pi bt})}{\partial f^{n-1}}\\
&amp;=\frac{1}{(j2\pi)^{n-1}}\frac{\partial^{n-1}\frac{1}{2\pi b+j2\pi f}}{\partial f^{n-1}}\\
&amp;=\frac{1}{(j2\pi)^{n-1}}\frac{(j)^{n-1}(n-1)!}{2\pi}\frac{1}{(b+jf)^n}\\
&amp;=\frac{(n-1)!}{(2\pi b)^n}\frac{1}{(1+jf/b)^n} \label{eq:1}
\end{aligned}
\end{equation} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
\begin{aligned}
S(f)=FT\left(cos(2\pi f_ct+\phi)\right)
&amp;=e^{j\phi}\delta(f-f_c)+e^{-j\phi}\delta(f+f_c)
\end{aligned}
\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;Combine equation (2) and (3), we can get &lt;script type=&quot;math/tex&quot;&gt;G(f)&lt;/script&gt;&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
\begin{aligned}
G(f)&amp;=a \times R(f)*S(f)\\
&amp;=a \times e^{j\phi}\frac{(n-1)!}{(2\pi b)^n}\frac{1}{(1+j(f-f_c)/b)^n}+ae^{-j\phi}\frac{(n-1)!}{(2\pi b)^n}\frac{1}{(1+j(f+f_c)/b)^n}\\
&amp;=a\frac{(n-1)!}{(2\pi b)^n}\left[e^{j\phi}\left(\frac{1}{(1+j(f-f_c)/b)}\right)^n+e^{-j\phi}\left(\frac{1}{(1+j(f+f_c)/b)}\right)^n\right]
\end{aligned}
\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;As shown in the following diagram,&lt;script type=&quot;math/tex&quot;&gt;G(f)&lt;/script&gt; consists of two symmetric parts. For simplicity, only positive frequency side is considered&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Gammatone-filters/gtf-ir-spectrum.png&quot; width=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Further more, Gammatone filter can be regarded as low-pass filter with frequency shitfted by fc. Now, equalently, we can first shift input signal by -fc and filter it with a lowpass filter, finally shift the frequency by fc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Gammatone-filters/diagram.png&quot; alt=&quot;diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The detailed derivation is in &lt;a href=&quot;README.pdf&quot;&gt;README.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;  from GTF import GTF
  gt_filter = GTF(fs=44100,low_cf=80,high_cf=5000,N_band=32)
  x_filtered = gt_filter.filter_c(x,is_aligned=0)# not aligned
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;buildin-examples&quot;&gt;Buildin examples&lt;/h2&gt;

&lt;p&gt;In termial&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  python GTF.py example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-Python&quot;&gt;  #definition of example func
  def example():
      fs = 16e3
      gt_filter = GTF(fs,freq_low=80,freq_high=5e3,N_band=16)

      # delays and gains
      fig = plt.figure()
      gt_filter.cal_delay_gain_cfs(is_plot=True,fig=fig)
      fig.savefig('/assets/images/Gammatone-filters/delay_gain.png')

      # impulse response direct from equation
      ir_equation = gt_filter.get_ir_equation()
      ir_equation = ir_equation/np.max(np.abs(ir_equation))

      # ir: filter impulse signal
      ir = gt_filter.get_ir(is_gain_norm=False,is_aligned=False)
      ir = ir/np.max(np.abs(ir))

      #
      ir_norm = gt_filter.get_ir(is_gain_norm=True,is_aligned=False)

      # ir phase compensated
      ir_norm_aligned = gt_filter.get_ir(is_gain_norm=True,is_aligned=True,delay_common=0)

      # plot ir
      if not os.path.exists('/assets/images/Gammatone-filters'):
          os.mkdir('/assets/images/Gammatone-filters')

      fig_ir_eq = gt_filter.plot_ir_spec(ir_equation)
      fig_ir_eq.savefig('/assets/images/Gammatone-filters/ir_equation.png')

      fig_ir = gt_filter.plot_ir_spec(ir)
      fig_ir.savefig('/assets/images/Gammatone-filters/ir.png')

      fig_norm = gt_filter.plot_ir_spec(ir_norm)
      fig_norm.savefig('/assets/images/Gammatone-filters/ir_norm.png')

      fig_ir_norm_aligned = gt_filter.plot_ir_spec(ir_norm_aligned)
      fig_ir_norm_aligned.savefig('/assets/images/Gammatone-filters/ir_norm_aligned.png')

      gt_filter.filter_spectrum()
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Spectrum of Gammatone filter&lt;/p&gt;

    &lt;p&gt;Only filter with cf=4kHz is ploted&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/Gammatone-filters/filter_spectrum.png&quot; alt=&quot;delays_gains&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Delays and gains at cfs&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/images/Gammatone-filters/delay_gain.png&quot; alt=&quot;delay_gain.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Basically, the phase delay at center frequency approximates 0.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Impulse response of Gammatone filters&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Max-amplitude normalized&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/images/Gammatone-filters/ir.png&quot; alt=&quot;ir.png&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Gain normalization&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/images/Gammatone-filters/ir_norm.png&quot; alt=&quot;ir_norm&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Phase compensation&lt;/p&gt;

        &lt;p&gt;Phase compensation is actually to align impulse response peaks of all filter&lt;sup id=&quot;fnref:Brown1994&quot;&gt;&lt;a href=&quot;#fn:Brown1994&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/images/Gammatone-filters/ir_norm_aligned.png&quot; alt=&quot;ir_norm_aligned&quot; /&gt;&lt;/p&gt;

        &lt;!-- Next, I want to make summary about signal recovery after filtered by Gammatone filters.[Flag] --&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;about-efficiency&quot;&gt;About efficiency&lt;/h2&gt;

&lt;p&gt;The key filter part is both written in c and python, and apparentlly, the c implementation is much fast&lt;/p&gt;

&lt;p&gt;Efficiency test&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt; python GTF.py efficiency

   &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;consumed&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      c         :0.39
      python    :36.23
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:Holdsworth1988&quot;&gt;
      &lt;p&gt;Holdsworth, John, Roy Patterson, and Ian Nimmo-Smith. Implementing a GammaTone Filter Bank &lt;a href=&quot;#fnref:Holdsworth1988&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:Brown1994&quot;&gt;
      &lt;p&gt;G. J. Brown and M. P. Cooke (1994) Computational auditory scene analysis. Computer Speech and Language, 8, pp. 297-336 &lt;a href=&quot;#fnref:Brown1994&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
				<pubDate>Fri, 13 Sep 2019 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/work/2019/09/13/Gammatone-filers.html</link>
				<guid isPermaLink="true">http://localhost:4000/work/2019/09/13/Gammatone-filers.html</guid>
			</item>
		
	</channel>
</rss>
